def sum_n(n):  #:가 중괄호 역할이다
	s = 0
	for i in range(1,n+1):
		s = s + i
	return s;
	
	
print(sum_n(10)) #55
print(sum_n(100)) #5050

def sum_n_v2(n): #등차수열 공식 이용한 version
	return n*(n+1)/2
	
print(sum_n_v2(10)) #55.0
print(sum_n_v2(100)) #5050.0

#소숫점 버리기 참고 : https://dpdpwl.tistory.com/94

print(round(sum_n_v2(10))) #55
print(round(sum_n_v2(100))) #5050

#big O 표기법
#계산 복잡도를 표현하는 대표적인 방법. 입력크기에 대한 계산횟수의 비례관계에 따라 표현이 달라짐.

#연습문제 1-1 1~n까지 연속한 숫자의 제곱의 합을 구하는 프로그램을 for 반복문으로 만들기

def sum_Of_pow(n):
	result = 0
	for i in range(1,n+1):
		result = result + i*i
	return result;
		
print(sum_Of_pow(10)) #385 #return 들여쓰기 하나만 잘못해도 for 함수 안으로 인식된다 조심!!

#연습문제 1-2 연습문제 1-1 계산복잡도는..? n이 증가함에 따라 n만큼의 횟수의 반복이 필요하므로 O(n)이다
#연습문제 1-3 ~~ 공식에 n의 3제곱이 있더라도 n 이 주어진 상황에서서 계산은 한 번에 끝나므로 입력값에 따라 계산 복잡도가 변하지 않음. 따라서 O(1)


#프로그램 2-1 최댓값 구하기
def find_max(a):

    n = len(a)             # 입력 크기 n

    max_v = a[0]           # 리스트의 첫 번째 값을 최댓값으로 기억

    for i in range(1, n):  # 1부터 n -1까지 반복

        if a[i] > max_v:   # 이번 값이 현재까지 기억된 최댓값보다 크면

            max_v = a[i]   # 최댓값을 변경

    return max_v
	
v1 = [17, 92, 18, 33, 58, 7, 33, 42]

print(find_max(v1))
	
	#2-2 최댓값의 인덱스 구하기
def find_max_idx(a):

    n = len(a)                 # 입력 크기 n

    max_idx = 0                # 리스트 중 0번 위치를 최댓값 위치로 기억

    for i in range(1, n):

        if a[i] > a[max_idx]:  # 이번 값이 현재까지 기억된 최댓값보다 크면

            max_idx = i        # 최댓값의 위치를 변경

    return max_idx

 

v2 = [17, 92, 18, 33, 58, 7, 33, 42]

print(find_max_idx(v2))


#프로그램 3-1 동명이인 찾기

def find_same_name(a):

    n = len(a)                     # 리스트의 자료 개수를 n에 저장

    result = set()                 # 결과를 저장할 빈 집합

    for i in range(0, n -1):       # 0부터 n -2까지 반복

        for j in range(i + 1, n):  # i+1부터 n -1까지 반복

            if a[i] == a[j]:      # 이름이 같으면

                result.add(a[i])   # 찾은 이름을 result에 추가

    return result

 

name = ["Tom", "Jerry", "Mike", "Tom"] # 대소문자 유의: 파이썬은 대소문자를 구분함

print(find_same_name(name))

name2 = ["Tom", "Jerry", "Mike", "Tom", "Mike"]

print(find_same_name(name2))


#이중 반복문을 쓸 경우 어지간해선 O(n^2)을 피하기가 힘들어보인다. 코드가 특별히 간결해지는 경우를 제외하고는 다른 방법을 쓰는 것이 좋겠다.

#연습문제 3-1

def comp(n):
	le = len(n)
	
	for i in range(1,le):
		for j in range(i+1, le):
			if n[i] == n[j]:
				print(n[i],"-",n[j])
	

	
print(comp(["Tom", "Jerry", "Mike"]))

#모법답안
def print_pairs(a):

    n = len(a)                     # 리스트의 자료 개수를 n에 저장

    for i in range(0, n - 1):      # 0부터 n - 2까지 반복

        for j in range(i + 1, n):  # i + 1부터 n - 1까지 반복

            print(a[i], "-", a[j])

 

name = ["Tom", "Jerry", "Mike"]

print_pairs(name)

print()

name2 = ["Tom", "Jerry", "Mike", "John"]

print_pairs(name2)


#프로그램 4-1 팩토리얼

def factorial(n):
	fact = 1
	for i in range(1,n+1):
		fact = fact*i
	return fact
	
print(factorial(1))			        # 1! = 1
print(factorial(5))                 # 5! = 120
print(factorial(10))                # 10! = 3628800

#재귀호출, 재귀함수

#프로그램 4-2

def fact(n):

    if n <= 1:

        return 1

    return n * fact(n - 1)

 

print(fact(1))  # 1! = 1

print(fact(5))  # 5! = 120

print(fact(10)) # 10! = 3628800


def sum_all (n):
	if n==1:
		return 1
	return sum_all(n-1) + n
	
print(sum_n(10))  # 1부터 10까지의 합(입력: 10, 출력: 55)

print(sum_n(100)) # 1부터 100까지의 합(입력: 100, 출력: 5050)	

#나는 왜 못만드러쒀~~
## 담에 다시 도전!!
 ##def Biggi(listof,n):
	
	##if max_n < listof[n] 
	
def find_max(a, n):  # 리스트 a의 앞부분 n개 중 최댓값을 구하는 재귀 함수

    if n == 1:

        return a[0]

    max_n_1 = find_max(a, n - 1) # n - 1개 중 최댓값을 구함

    if max_n_1 > a[n - 1]:       # n - 1개 중 최댓값과 n - 1번 위치 값을 비교

        return max_n_1

    else:

        return a[n - 1]

 

v = [17, 92, 18, 33, 58, 7, 33, 42]

print(find_max(v, len(v)))  # 함수에 리스트의 자료 개수를 인자로 추가하여 호출


#프로그램 5-2
# 최대공약수 구하기

# 입력: a, b

# 출력: a와 b의 최대공약수

 

def gcd(a, b):

    if b == 0:           # 종료 조건

        return a

    return gcd(b, a % b)  # 좀 더 작은 값으로 자기 자신을 호출

 

print(gcd(1, 5))          # 1

print(gcd(3, 6))          # 3

print(gcd(60, 24))        # 12

print(gcd(81, 27))        # 27
	

## 담엔 좀 더 빨리 끝내자!!
# 하노이의 탑

# 입력: 옮기려는 원반의 개수 n

#       옮길 원반이 현재 있는 출발점 기둥 from_pos

#       원반을 옮길 도착점 기둥 to_pos

#       옮기는 과정에서 사용할 보조 기둥 aux_pos

# 출력: 원반을 옮기는 순서

 

def hanoi(n, from_pos, to_pos, aux_pos):

    if n == 1: # 원반 한 개를 옮기는 문제면 그냥 옮기면 됨

        print(from_pos, "->", to_pos)

        return

 

    # 원반 n -1개를 aux_pos로 이동(to_pos를 보조 기둥으로)

    hanoi(n -1, from_pos, aux_pos, to_pos)

    # 가장 큰 원반을 목적지로 이동

    print(from_pos, "->", to_pos)

    # aux_pos에 있는 원반 n -1개를 목적지로 이동(from_pos를 보조 기둥으로)

    hanoi(n - 1, aux_pos, to_pos, from_pos)

 

print("n = 1")

hanoi(1, 1, 3, 2) # 원반 한 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)

print("n = 2")

hanoi(2, 1, 3, 2) # 원반 두 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)

print("n = 3")

hanoi(3, 1, 3, 2) # 원반 세 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)

print("n = 4")

hanoi(4, 1, 3, 2) # 원반 세 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)

print("n = 5")

hanoi(5, 1, 3, 2) # 원반 세 개를 1번 기둥에서 3번 기둥으로 이동(2번을 보조 기둥으로)
